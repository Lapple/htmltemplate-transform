#!/usr/bin/env node

var path = require('path');

var fs = require('fs');

var parser = require('htmltemplate-parser');

var astStringify = require('../ast-stringify/');

var transform = require('../');

var optimizeConditions = require('../plugins/optimize-conditions');

var PARSER_OPTIONS = {
    ignoreHTMLTags: true,
    collectStringEntities: true
};

var argv = require('yargs')
    .usage('Usage: $0 [options]')
    .options({
        'path': {
            demand: true,
            describe: 'file to optimize',
            type: 'string'
        },

        'test': {
            describe: 'display the result of the test'
        },

        'ast': {
            describe: 'display ast'
        }
    })
    .argv;

var templateString = fs.readFileSync(argv.path).toString();

try {
    var AST = parser.parse(templateString, PARSER_OPTIONS);

    transform(argv.path, null, PARSER_OPTIONS)
    .using(
        optimizeConditions({
            'falsy': false,
            'truthy': true
        })
    )
    .toAST(function(err, optimizedAST) {
        if (err) {
            return console.error(err);
        }

        if (argv.test) {
            var templateFromInitialAST = astStringify(AST);

            if (templateString !== templateFromInitialAST) {
                console.log('%s: initial difference', argv.path);
            } else {
                console.log('%s: initial OK!', argv.path);

                var templateFromOptimizedAST = astStringify(optimizedAST);

                if (templateString !== templateFromOptimizedAST) {
                    console.log('%s: optimizations possible', argv.path);
                }
            }
            return;
        }

        if (argv.ast) {
            console.log(JSON.stringify(optimizedAST, null, 2));
            return;
        }
        console.log(astStringify(optimizedAST));
    });
} catch(e) {
    console.log('Parser error');
}
